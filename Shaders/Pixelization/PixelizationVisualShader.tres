[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
source = 1
texture_type = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "pixelsize"

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]

[resource]
code = "shader_type canvas_item;
uniform float pixelsize;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(SCREEN_UV,0.0);

// ScalarUniform:16
	float n_out16p0;
	n_out16p0 = pixelsize;

// Input:14
	vec3 n_out14p0;
	n_out14p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorOp:20
	vec3 n_out20p0;
	n_out20p0 = vec3(n_out16p0) * n_out14p0;

// VectorOp:10
	vec3 n_out10p0;
	n_out10p0 = mod( n_out2p0 , n_out20p0 );

// VectorOp:11
	vec3 n_out11p0;
	n_out11p0 = n_out2p0 - n_out10p0;

// Scalar:13
	float n_out13p0;
	n_out13p0 = 0.000000;

// Texture:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out11p0.xy , n_out13p0 );
		n_out12p0 = _tex_read.rgb;
		n_out12p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -771, -56.5 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 440, -40 )
nodes/fragment/0/position = Vector2( 720, 0 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -180, 0 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 100, 80 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 320, -20 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 540, -20 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 300, 200 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -440, 260 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -360, 180 )
nodes/fragment/20/node = SubResource( 8 )
nodes/fragment/20/position = Vector2( -140, 160 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( -60, -160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 10, 0, 11, 0, 12, 0, 12, 0, 0, 0, 13, 0, 12, 1, 16, 0, 20, 0, 14, 0, 20, 1, 20, 0, 10, 1, 2, 0, 11, 0, 10, 0, 11, 1 )
