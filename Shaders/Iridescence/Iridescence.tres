[gd_resource type="VisualShader" load_steps=30 format=2]

[sub_resource type="VisualShaderNodeDotProduct" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "view"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorUniform" id=10]
uniform_name = "BaseColor"

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "Gradient"

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "Noise1"

[sub_resource type="VisualShaderNodeTextureUniform" id=13]
uniform_name = "Noise2"

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Noise1Size"

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Noise2Size"

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "Metallic"

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "Roughness"

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "Specular"

[sub_resource type="VisualShaderNodeExpression" id=26]
output_port_for_preview = 0
size = Vector2( 457, 334 )
expression = "worley = vec3(worley(UV, columns, rows));"

[sub_resource type="VisualShaderNodeInput" id=27]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=28]
constant = 5.0

[sub_resource type="VisualShaderNodeScalarConstant" id=29]
constant = 5.0

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=30]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=31]
constant = 10.0

[sub_resource type="VisualShaderNodeScalarConstant" id=32]
constant = 10.0

[sub_resource type="VisualShaderNodeExpression" id=33]
output_port_for_preview = 0
size = Vector2( 427, 340 )
expression = "voronoi = vec3(voronoi(UV, columns, rows).r);"

[sub_resource type="VisualShaderNodeGlobalExpression" id=35]
size = Vector2( 603, 1039.5 )
expression = "vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}

vec2 voronoi(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	vec2 minimum_point;

	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);

			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			
			if(dist < minimum_dist) {
				minimum_dist = dist;
				minimum_point = point;
			}
		}
	}
	return minimum_point;
}"

[sub_resource type="VisualShaderNodeColorOp" id=36]

[sub_resource type="VisualShaderNodeScalarUniform" id=37]
uniform_name = "AmbientOcclusion"

[sub_resource type="VisualShaderNodeVectorInterp" id=38]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "normal"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 BaseColor : hint_color;
uniform float Noise1Size;
uniform sampler2D Noise1;
uniform float Noise2Size;
uniform sampler2D Noise2;
uniform sampler2D Gradient;
uniform float Metallic;
uniform float Roughness;
uniform float Specular;
uniform float AmbientOcclusion;


// GlobalExpression:0
	vec2 random(vec2 uv) {
		return vec2(fract(sin(dot(uv.xy,
			vec2(12.9898,78.233))) * 43758.5453123));
	}
	
	float worley(vec2 uv, float columns, float rows) {
		
		vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
		vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
		
		float minimum_dist = 1.0;  
		
		for (int y= -1; y <= 1; y++) {
			for (int x= -1; x <= 1; x++) {
				vec2 neighbor = vec2(float(x),float(y));
				vec2 point = random(index_uv + neighbor);
				
				vec2 diff = neighbor + point - fract_uv;
				float dist = length(diff);
				minimum_dist = min(minimum_dist, dist);
			}
		}
		
		return minimum_dist;
	}
	
	vec2 voronoi(vec2 uv, float columns, float rows) {
		
		vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
		vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
		
		float minimum_dist = 1.0;  
		vec2 minimum_point;
	
		for (int y= -1; y <= 1; y++) {
			for (int x= -1; x <= 1; x++) {
				vec2 neighbor = vec2(float(x),float(y));
				vec2 point = random(index_uv + neighbor);
	
				vec2 diff = neighbor + point - fract_uv;
				float dist = length(diff);
				
				if(dist < minimum_dist) {
					minimum_dist = dist;
					minimum_point = point;
				}
			}
		}
		return minimum_point;
	}

void vertex() {
// Input:8
	vec3 n_out8p0 = NORMAL;

// Output:0
	COLOR.rgb = n_out8p0;

}

void fragment() {
// ColorUniform:36
	vec3 n_out36p0 = BaseColor.rgb;
	float n_out36p1 = BaseColor.a;

// Input:30
	vec3 n_out30p0 = VIEW;

// ScalarUniform:47
	float n_out47p0 = Noise1Size;

// Input:35
	vec3 n_out35p0 = vec3(UV, 0.0);

// VectorOp:43
	vec3 n_out43p0 = vec3(n_out47p0) * n_out35p0;

// TextureUniform:38
	vec3 n_out38p0;
	float n_out38p1;
	{
		vec4 n_tex_read = texture(Noise1, n_out43p0.xy);
		n_out38p0 = n_tex_read.rgb;
		n_out38p1 = n_tex_read.a;
	}

// ScalarUniform:48
	float n_out48p0 = Noise2Size;

// VectorOp:49
	vec3 n_out49p0 = n_out35p0 * vec3(n_out48p0);

// TextureUniform:39
	vec3 n_out39p0;
	float n_out39p1;
	{
		vec4 n_tex_read = texture(Noise2, n_out49p0.xy);
		n_out39p0 = n_tex_read.rgb;
		n_out39p1 = n_tex_read.a;
	}

// VectorOp:41
	vec3 n_out41p0 = n_out38p0 * n_out39p0;

// Input:7
	vec3 n_out7p0 = NORMAL;

// VectorMix:78
	vec3 n_in78p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out78p0 = mix(n_out41p0, n_out7p0, n_in78p2);

// DotProduct:29
	float n_out29p0 = dot(n_out30p0, n_out78p0);

// TextureUniform:37
	vec3 n_out37p0;
	float n_out37p1;
	{
		vec4 n_tex_read = texture(Gradient, vec3(n_out29p0).xy);
		n_out37p0 = n_tex_read.rgb;
		n_out37p1 = n_tex_read.a;
	}

// ColorOp:76
	vec3 n_out76p0 = vec3(1.0) - (vec3(1.0) - n_out36p0) * (vec3(1.0) - n_out37p0);

// ScalarUniform:50
	float n_out50p0 = Metallic;

// ScalarUniform:51
	float n_out51p0 = Roughness;

// ScalarUniform:52
	float n_out52p0 = Specular;

// ScalarUniform:77
	float n_out77p0 = AmbientOcclusion;

// Output:0
	ALBEDO = n_out76p0;
	ALPHA = n_out36p1;
	METALLIC = n_out50p0;
	ROUGHNESS = n_out51p0;
	SPECULAR = n_out52p0;
	AO = n_out77p0;
	NORMAL = n_out78p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -327.874, -278.625 )
nodes/vertex/8/node = SubResource( 9 )
nodes/vertex/8/position = Vector2( 63, 278 )
nodes/vertex/connections = PoolIntArray( 8, 0, 0, 6 )
nodes/fragment/0/position = Vector2( 1660, -60 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 340, 160 )
nodes/fragment/29/node = SubResource( 3 )
nodes/fragment/29/position = Vector2( 820, -20 )
nodes/fragment/30/node = SubResource( 4 )
nodes/fragment/30/position = Vector2( 620, -20 )
nodes/fragment/35/node = SubResource( 7 )
nodes/fragment/35/position = Vector2( -320, 80 )
nodes/fragment/36/node = SubResource( 10 )
nodes/fragment/36/position = Vector2( 1020, -360 )
nodes/fragment/37/node = SubResource( 11 )
nodes/fragment/37/position = Vector2( 1000, -220 )
nodes/fragment/38/node = SubResource( 12 )
nodes/fragment/38/position = Vector2( 100, -100 )
nodes/fragment/39/node = SubResource( 13 )
nodes/fragment/39/position = Vector2( 100, 80 )
nodes/fragment/41/node = SubResource( 14 )
nodes/fragment/41/position = Vector2( 360, 40 )
nodes/fragment/43/node = SubResource( 15 )
nodes/fragment/43/position = Vector2( -100, -40 )
nodes/fragment/47/node = SubResource( 16 )
nodes/fragment/47/position = Vector2( -340, -20 )
nodes/fragment/48/node = SubResource( 17 )
nodes/fragment/48/position = Vector2( -340, 180 )
nodes/fragment/49/node = SubResource( 18 )
nodes/fragment/49/position = Vector2( -100, 140 )
nodes/fragment/50/node = SubResource( 19 )
nodes/fragment/50/position = Vector2( 1240, -120 )
nodes/fragment/51/node = SubResource( 20 )
nodes/fragment/51/position = Vector2( 1240, -60 )
nodes/fragment/52/node = SubResource( 21 )
nodes/fragment/52/position = Vector2( 1240, 0 )
nodes/fragment/66/node = SubResource( 26 )
nodes/fragment/66/position = Vector2( -220, 360 )
nodes/fragment/66/size = Vector2( 457, 334 )
nodes/fragment/66/input_ports = "0,1,uv;1,0,columns;2,0,rows;"
nodes/fragment/66/output_ports = "0,1,worley;"
nodes/fragment/66/expression = "worley = vec3(worley(UV, columns, rows));"
nodes/fragment/67/node = SubResource( 27 )
nodes/fragment/67/position = Vector2( -440, 280 )
nodes/fragment/68/node = SubResource( 28 )
nodes/fragment/68/position = Vector2( -460, 460 )
nodes/fragment/69/node = SubResource( 29 )
nodes/fragment/69/position = Vector2( -460, 540 )
nodes/fragment/70/node = SubResource( 30 )
nodes/fragment/70/position = Vector2( -420, 680 )
nodes/fragment/71/node = SubResource( 31 )
nodes/fragment/71/position = Vector2( -440, 860 )
nodes/fragment/72/node = SubResource( 32 )
nodes/fragment/72/position = Vector2( -440, 940 )
nodes/fragment/73/node = SubResource( 33 )
nodes/fragment/73/position = Vector2( -220, 700 )
nodes/fragment/73/size = Vector2( 427, 340 )
nodes/fragment/73/input_ports = "0,1,uv;1,0,columns;2,0,rows;"
nodes/fragment/73/output_ports = "0,1,voronoi;"
nodes/fragment/73/expression = "voronoi = vec3(voronoi(UV, columns, rows).r);"
nodes/fragment/75/node = SubResource( 35 )
nodes/fragment/75/position = Vector2( -1080, 280 )
nodes/fragment/75/size = Vector2( 603, 1039.5 )
nodes/fragment/75/input_ports = ""
nodes/fragment/75/output_ports = ""
nodes/fragment/75/expression = "vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}

vec2 voronoi(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	vec2 minimum_point;

	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);

			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			
			if(dist < minimum_dist) {
				minimum_dist = dist;
				minimum_point = point;
			}
		}
	}
	return minimum_point;
}"
nodes/fragment/76/node = SubResource( 36 )
nodes/fragment/76/position = Vector2( 1340, -360 )
nodes/fragment/77/node = SubResource( 37 )
nodes/fragment/77/position = Vector2( 1240, 60 )
nodes/fragment/78/node = SubResource( 38 )
nodes/fragment/78/position = Vector2( 580, 100 )
nodes/fragment/connections = PoolIntArray( 36, 1, 0, 1, 29, 0, 37, 0, 43, 0, 38, 0, 35, 0, 43, 1, 47, 0, 43, 0, 48, 0, 49, 1, 35, 0, 49, 0, 49, 0, 39, 0, 38, 0, 41, 0, 50, 0, 0, 2, 51, 0, 0, 3, 52, 0, 0, 4, 67, 0, 66, 0, 68, 0, 66, 1, 69, 0, 66, 2, 70, 0, 73, 0, 71, 0, 73, 1, 72, 0, 73, 2, 39, 0, 41, 1, 36, 0, 76, 0, 37, 0, 76, 1, 76, 0, 0, 0, 30, 0, 29, 0, 77, 0, 0, 6, 41, 0, 78, 0, 7, 0, 78, 1, 78, 0, 29, 1, 78, 0, 0, 7 )
